{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/Postslist.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from \"./postsSlice\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { useEffect } from \"react\";\nimport PostExcerpts from \"./PostExcerpts\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsList = () => {\n  _s();\n  //   const posts = useSelector((state) => state.posts);\n  // rewriting the code so that we can keep the value of the useSelector dynamically\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const postsError = useSelector(getPostsError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (postsStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);\n  let content;\n  if (postsStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 15\n    }, this);\n  } else if (postsStatus === 'succeeded') {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => /*#__PURE__*/_jsxDEV(PostExcerpts, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 40\n    }, this)\n\n    // <article key={post.id}>\n    //   <h3>{post.title}</h3>\n    //   <p>{post.content.substring(0, 100)}</p>\n    //   <p className=\"postCredit\">\n    //     <PostAuthor userId={post.userId} />\n    //     <TimeAgo timestamp={post.date} />\n\n    //   </p>\n    //   <ReactionButtons post = {post}/>\n    // </article>\n    );\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), renderedPosts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(PostsList, \"/BXk2Y1KyIXv3hX5athMUfnux8I=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["useDispatch","useSelector","selectAllPosts","getPostsStatus","getPostsError","fetchPosts","PostAuthor","TimeAgo","ReactionButtons","useEffect","PostExcerpts","jsxDEV","_jsxDEV","Fragment","_Fragment","PostsList","_s","posts","postsStatus","postsError","dispatch","content","children","fileName","_jsxFileName","lineNumber","columnNumber","orderedPosts","slice","sort","a","b","date","localeCompare","map","post","id","renderedPosts","_c","$RefreshReg$"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/Postslist.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { selectAllPosts , getPostsStatus , getPostsError , fetchPosts } from \"./postsSlice\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { useEffect } from \"react\";\nimport PostExcerpts from \"./PostExcerpts\";\n\nconst PostsList = () => {\n  //   const posts = useSelector((state) => state.posts);\n  // rewriting the code so that we can keep the value of the useSelector dynamically\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const postsError = useSelector(getPostsError);\n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n    if(postsStatus === 'idle'){\ndispatch(fetchPosts())\n    }\n  },[postsStatus,dispatch])\n\n  let content;\n\n  if(postsStatus === 'loading'){\n    content = <p>\"</p>\n  } else if (postsStatus === 'succeeded'){\n\nconst orderedPosts = posts.slice().sort((a,b)=>b.date.localeCompare(a.date))\n\n  content = orderedPosts.map((post) => <PostExcerpts key={post.id} post = {post} />\n\n\n\n    // <article key={post.id}>\n    //   <h3>{post.title}</h3>\n    //   <p>{post.content.substring(0, 100)}</p>\n    //   <p className=\"postCredit\">\n    //     <PostAuthor userId={post.userId} />\n    //     <TimeAgo timestamp={post.date} />\n        \n    //   </p>\n    //   <ReactionButtons post = {post}/>\n    // </article>\n  );\n}\n\n  return (\n    <>\n      <section>\n        <h2>Posts</h2>\n        {renderedPosts}\n      </section>\n    </>\n  );\n};\n\nexport default PostsList;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,EAAGC,cAAc,EAAGC,aAAa,EAAGC,UAAU,QAAQ,cAAc;AAC3F,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA;EACA,MAAMC,KAAK,GAAGhB,WAAW,CAACC,cAAc,CAAC;EACzC,MAAMgB,WAAW,GAAGjB,WAAW,CAACE,cAAc,CAAC;EAC/C,MAAMgB,UAAU,GAAGlB,WAAW,CAACG,aAAa,CAAC;EAC7C,MAAMgB,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAE9BS,SAAS,CAAC,MAAI;IACZ,IAAGS,WAAW,KAAK,MAAM,EAAC;MAC9BE,QAAQ,CAACf,UAAU,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,EAAC,CAACa,WAAW,EAACE,QAAQ,CAAC,CAAC;EAEzB,IAAIC,OAAO;EAEX,IAAGH,WAAW,KAAK,SAAS,EAAC;IAC3BG,OAAO,gBAAGT,OAAA;MAAAU,QAAA,EAAG;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACpB,CAAC,MAAM,IAAIR,WAAW,KAAK,WAAW,EAAC;IAEzC,MAAMS,YAAY,GAAGV,KAAK,CAACW,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAGA,CAAC,CAACC,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI,CAAC,CAAC;IAE1EX,OAAO,GAAGM,YAAY,CAACO,GAAG,CAAEC,IAAI,iBAAKvB,OAAA,CAACF,YAAY;MAAeyB,IAAI,EAAIA;IAAK,GAAtBA,IAAI,CAACC,EAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB;;IAI9E;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACF,CAAC;EACH;EAEE,oBACEd,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACEV,OAAA;MAAAU,QAAA,gBACEV,OAAA;QAAAU,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACbW,aAAa;IAAA;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC,gBACV,CAAC;AAEP,CAAC;AAACV,EAAA,CA/CID,SAAS;EAAA,QAGCd,WAAW,EACLA,WAAW,EACZA,WAAW,EACbD,WAAW;AAAA;AAAAsC,EAAA,GANxBvB,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}