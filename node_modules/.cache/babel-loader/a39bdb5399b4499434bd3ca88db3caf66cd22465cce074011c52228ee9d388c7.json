{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nconst initialState = [{\n  id: \"1\",\n  title: \"Macbook\",\n  content: \"It is hard\",\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}, {\n  id: \"2\",\n  title: \"Windows\",\n  content: \"It is Easy\",\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}];\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post);\n    }\n  }\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = state => state.posts;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","posts","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\n\nconst initialState = [\n  {\n    id: \"1\",\n    title: \"Macbook\",\n    content: \"It is hard\",\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      wow: 0,\n      heart: 0,\n      rocket: 0,\n      coffee: 0,\n    },\n  },\n  {\n    id: \"2\",\n    title: \"Windows\",\n    content: \"It is Easy\",\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\n    reactions: {\n        thumbsUp: 0,\n        wow: 0,\n        heart: 0,\n        rocket: 0,\n        coffee: 0,\n      },\n  },\n];\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n                thumbsUp: 0,\n                wow: 0,\n                heart: 0,\n                rocket: 0,\n                coffee: 0,\n              },\n          },\n        };\n      },\n    },\n\n    reactionAdded(state,action){\n        const {postId,reaction} = action.payload\n        const existingPost = state.find(post)\n\n    }\n  },\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = (state) => state.posts;\n\nexport const { postAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,GAAG,QAAQ,UAAU;AAE9B,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAI,CAAC,CAAC,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACpDC,SAAS,EAAE;IACTC,QAAQ,EAAE,CAAC;IACXC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE;EACV;AACF,CAAC,EACD;EACEZ,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAI,CAAC,CAAC,EAAE;IAAEC,OAAO,EAAE;EAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnDC,SAAS,EAAE;IACPC,QAAQ,EAAE,CAAC;IACXC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE;EACV;AACJ,CAAC,CACF;AAED,MAAMC,UAAU,GAAGjB,WAAW,CAAC;EAC7BkB,IAAI,EAAE,OAAO;EACbf,YAAY;EACZgB,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACAC,SAAS,EAAE;MACTC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC5B,CAAC;MACD;MACAC,OAAOA,CAACrB,KAAK,EAAEC,OAAO,EAAEqB,MAAM,EAAE;QAC9B,OAAO;UACLF,OAAO,EAAE;YACPrB,EAAE,EAAEH,MAAM,CAAC,CAAC;YACZI,KAAK;YACLC,OAAO;YACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;YAC9BiB,MAAM;YACNhB,SAAS,EAAE;cACPC,QAAQ,EAAE,CAAC;cACXC,GAAG,EAAE,CAAC;cACNC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,CAAC;cACTC,MAAM,EAAE;YACV;UACJ;QACF,CAAC;MACH;IACF,CAAC;IAEDY,aAAaA,CAACN,KAAK,EAACC,MAAM,EAAC;MACvB,MAAM;QAACM,MAAM;QAACC;MAAQ,CAAC,GAAGP,MAAM,CAACE,OAAO;MACxC,MAAMM,YAAY,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,CAAC;IAEzC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAIZ,KAAK,IAAKA,KAAK,CAACa,KAAK;AAEpD,OAAO,MAAM;EAAEf;AAAU,CAAC,GAAGH,UAAU,CAACmB,OAAO;AAE/C,eAAenB,UAAU,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}