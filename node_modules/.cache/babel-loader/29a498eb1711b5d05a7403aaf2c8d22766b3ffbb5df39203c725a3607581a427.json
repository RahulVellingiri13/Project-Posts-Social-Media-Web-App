{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Documents/GT/React/redux/reduxyt/src/app/features/posts/AddPostForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddPostForm = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const users = useSelector(selectAllUsers);\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n  const onTitleChanged = e => setTitle(e.target.value);\n  const onContentChanged = e => setContent(e.target.value);\n  const onAuthorChanged = e => setUserId(e.target.value);\n  const canSave = [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\n\n  //rewriting the onSavePostClicked logic here above;\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus(\"pending\");\n        dispatch(addNewPost({\n          title,\n          body: content,\n          userId\n        })).unwrap();\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n      } catch (err) {\n        console.error(\"Failed to save the post\", err);\n      } finally {\n        setAddRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  // const onSavePostClicked = () => {\n  //   if (title && content) {\n  //     dispatch(\n  //       postAdded(\n  //         // {id:nanoid(),\n  //         // title,\n  //         // content,}\n  //         //rewriting the code, here for convenince of structure of data\n  //         title,\n  //         content,\n  //         userId\n  //       )\n  //     );\n  //     setTitle(\"\");\n  //     setContent(\"\");\n  //     setUserId(\"\");\n  //   }\n  // };\n\n  // const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n\n  const userOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Add a new Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \" Post Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTite\",\n          name: \"postTitle\",\n          type: \"text\",\n          value: title,\n          onChange: onTitleChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postAuthor\",\n          children: \"Author:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"postAuthor\",\n          value: userId,\n          onChange: onAuthorChanged,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), userOptions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postContent\",\n          children: \" Content:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"postContent\",\n          name: \"postContent\",\n          type: \"text\",\n          value: content,\n          onChange: onContentChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onSavePostClicked,\n          disabled: !canSave,\n          children: \"Save Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AddPostForm, \"0Bk3gZmaPh44+YW5O1tdOvR80hU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AddPostForm;\nexport default AddPostForm;\nvar _c;\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"names":["useState","useDispatch","useSelector","addNewPost","selectAllUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","AddPostForm","_s","dispatch","title","setTitle","content","setContent","userId","setUserId","users","addRequestStatus","setAddRequestStatus","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","canSave","every","Boolean","onSavePostClicked","body","unwrap","err","console","error","userOptions","map","user","id","children","name","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/rahul/Documents/GT/React/redux/reduxyt/src/app/features/posts/AddPostForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { selectAllUsers } from \"../users/usersSlice\";\n\nconst AddPostForm = () => {\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n\n  const users = useSelector(selectAllUsers);\n\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n\n  const onTitleChanged = (e) => setTitle(e.target.value);\n  const onContentChanged = (e) => setContent(e.target.value);\n  const onAuthorChanged = (e) => setUserId(e.target.value);\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\n\n  //rewriting the onSavePostClicked logic here above;\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus(\"pending\");\n        dispatch(addNewPost({ title, body: content, userId })).unwrap();\n\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n      } catch (err) {\n        console.error(\"Failed to save the post\", err);\n      } finally {\n        setAddRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  // const onSavePostClicked = () => {\n  //   if (title && content) {\n  //     dispatch(\n  //       postAdded(\n  //         // {id:nanoid(),\n  //         // title,\n  //         // content,}\n  //         //rewriting the code, here for convenince of structure of data\n  //         title,\n  //         content,\n  //         userId\n  //       )\n  //     );\n  //     setTitle(\"\");\n  //     setContent(\"\");\n  //     setUserId(\"\");\n  //   }\n  // };\n\n  // const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n\n  const userOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ));\n\n  return (\n    <>\n      <section>\n        <h2> Add a new Post </h2>\n        <form>\n          <label htmlFor=\"postTitle\"> Post Title:</label>\n          <input\n            id=\"postTite\"\n            name=\"postTitle\"\n            type=\"text\"\n            value={title}\n            onChange={onTitleChanged}\n          />\n\n          <label htmlFor=\"postAuthor\">Author:</label>\n          <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n            <option value=\"\"></option>\n            {userOptions}\n          </select>\n\n          <label htmlFor=\"postContent\"> Content:</label>\n          <textarea\n            id=\"postContent\"\n            name=\"postContent\"\n            type=\"text\"\n            value={content}\n            onChange={onContentChanged}\n          />\n          <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n            Save Post\n          </button>\n        </form>\n      </section>\n    </>\n  );\n};\n\nexport default AddPostForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}