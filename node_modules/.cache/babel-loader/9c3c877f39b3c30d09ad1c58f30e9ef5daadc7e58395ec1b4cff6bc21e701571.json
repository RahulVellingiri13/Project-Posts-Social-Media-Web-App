{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// const initialState = [\n//   {\n//     id: \"1\",\n//     title: \"Macbook\",\n//     content: \"It is hard\",\n//     date: sub(new Date(), { minutes: 10 }).toISOString(),\n//     reactions: {\n//       thumbsUp: 0,\n//       wow: 0,\n//       heart: 0,\n//       rocket: 0,\n//       coffee: 0,\n//     },\n//   },\n//   {\n//     id: \"2\",\n//     title: \"Windows\",\n//     content: \"It is Easy\",\n//     date: sub(new Date(), { minutes: 5 }).toISOString(),\n//     reactions: {\n//         thumbsUp: 0,\n//         wow: 0,\n//         heart: 0,\n//         rocket: 0,\n//         coffee: 0,\n//       },\n//   },\n// ];\n\n//rewriting the initial state so that we can fetch the data from the apis\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    extraReducers\n  }\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = state => state.posts.posts;\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","post","extraReducers","selectAllPosts","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid,createAsyncThunk} from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\n\n// const initialState = [\n//   {\n//     id: \"1\",\n//     title: \"Macbook\",\n//     content: \"It is hard\",\n//     date: sub(new Date(), { minutes: 10 }).toISOString(),\n//     reactions: {\n//       thumbsUp: 0,\n//       wow: 0,\n//       heart: 0,\n//       rocket: 0,\n//       coffee: 0,\n//     },\n//   },\n//   {\n//     id: \"2\",\n//     title: \"Windows\",\n//     content: \"It is Easy\",\n//     date: sub(new Date(), { minutes: 5 }).toISOString(),\n//     reactions: {\n//         thumbsUp: 0,\n//         wow: 0,\n//         heart: 0,\n//         rocket: 0,\n//         coffee: 0,\n//       },\n//   },\n// ];\n\n//rewriting the initial state so that we can fetch the data from the apis\n\nconst initialState = {\n  posts: [],\n  status: 'idle' , // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n}\n\nexport const fetchPosts =  createAsyncThunk('posts/fetchPosts',async()=>{\n  const response = await axios.get(POSTS_URL)\n  return response.data\n})\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n                thumbsUp: 0,\n                wow: 0,\n                heart: 0,\n                rocket: 0,\n                coffee: 0,\n              },\n          },\n        };\n      },\n    },\n\n    reactionAdded(state,action){\n        const {postId,reaction} = action.payload\n        const existingPost = state.posts.find(post => post.id === postId)\n        if(existingPost){\n            existingPost.reactions[reaction]++\n        }\n\n    },\n    extraReducers\n  },\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = (state) => state.posts.posts;\n\nexport const { postAdded , reactionAdded} = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAACC,gBAAgB,QAAO,kBAAkB;AACtE,SAASC,GAAG,QAAQ,UAAU;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,SAAS,GAAG,4CAA4C;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EAAG;EACjBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIR,gBAAgB,CAAC,kBAAkB,EAAC,YAAS;EACtE,MAAMS,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,SAAS,CAAC;EAC3C,OAAOM,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGd,WAAW,CAAC;EAC7Be,IAAI,EAAE,OAAO;EACbT,YAAY;EACZU,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACAC,SAAS,EAAE;MACTC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACZ,KAAK,CAACc,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAClC,CAAC;MACD;MACAC,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;QAC9B,OAAO;UACLJ,OAAO,EAAE;YACPK,EAAE,EAAE1B,MAAM,CAAC,CAAC;YACZuB,KAAK;YACLC,OAAO;YACPG,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YAC9BJ,MAAM;YACNK,SAAS,EAAE;cACPC,QAAQ,EAAE,CAAC;cACXC,GAAG,EAAE,CAAC;cACNC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,CAAC;cACTC,MAAM,EAAE;YACV;UACJ;QACF,CAAC;MACH;IACF,CAAC;IAEDC,aAAaA,CAAClB,KAAK,EAACC,MAAM,EAAC;MACvB,MAAM;QAACkB,MAAM;QAACC;MAAQ,CAAC,GAAGnB,MAAM,CAACE,OAAO;MACxC,MAAMkB,YAAY,GAAGrB,KAAK,CAACZ,KAAK,CAACkC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACf,EAAE,KAAKW,MAAM,CAAC;MACjE,IAAGE,YAAY,EAAC;QACZA,YAAY,CAACT,SAAS,CAACQ,QAAQ,CAAC,EAAE;MACtC;IAEJ,CAAC;IACDI;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAIzB,KAAK,IAAKA,KAAK,CAACZ,KAAK,CAACA,KAAK;AAE1D,OAAO,MAAM;EAAEU,SAAS;EAAGoB;AAAa,CAAC,GAAGvB,UAAU,CAAC+B,OAAO;AAE9D,eAAe/B,UAAU,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}