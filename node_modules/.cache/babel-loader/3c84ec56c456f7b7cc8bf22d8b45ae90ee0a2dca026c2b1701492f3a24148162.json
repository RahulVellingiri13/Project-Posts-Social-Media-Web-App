{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nconst initialState = [{\n  id: \"1\",\n  title: \"Macbook\",\n  content: \"It is hard\",\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}, {\n  id: \"2\",\n  title: \"Windows\",\n  content: \"It is Easy\",\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString()\n}];\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId\n          }\n        };\n      }\n    }\n  }\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = state => state.posts;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","selectAllPosts","posts","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\n\nconst initialState = [\n  {\n    id: \"1\",\n    title: \"Macbook\",\n    content: \"It is hard\",\n    date: sub(new Date(),{minutes:10}).toISOString(),\n    reactions:{\n        thumbsUp : 0,\n        wow : 0,\n        heart:0,\n        rocket :0,\n        coffee:0\n\n    }\n  },\n  {\n    id: \"2\",\n    title: \"Windows\",\n    content: \"It is Easy\",\n    date: sub(new Date(),{minutes:5}).toISOString()\n  },\n];\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content,userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n          },\n        };\n      },\n    },\n  },\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = (state) => state.posts;\n\nexport const { postAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,GAAG,QAAQ,UAAU;AAE9B,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAI,CAAC,CAAC,EAAC;IAACC,OAAO,EAAC;EAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAChDC,SAAS,EAAC;IACNC,QAAQ,EAAG,CAAC;IACZC,GAAG,EAAG,CAAC;IACPC,KAAK,EAAC,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAC;EAEX;AACF,CAAC,EACD;EACEZ,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAI,CAAC,CAAC,EAAC;IAACC,OAAO,EAAC;EAAC,CAAC,CAAC,CAACC,WAAW,CAAC;AAChD,CAAC,CACF;AAED,MAAMO,UAAU,GAAGjB,WAAW,CAAC;EAC7BkB,IAAI,EAAE,OAAO;EACbf,YAAY;EACZgB,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACAC,SAAS,EAAE;MACTC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC5B,CAAC;MACD;MACAC,OAAOA,CAACrB,KAAK,EAAEC,OAAO,EAACqB,MAAM,EAAE;QAC7B,OAAO;UACLF,OAAO,EAAE;YACPrB,EAAE,EAAEH,MAAM,CAAC,CAAC;YACZI,KAAK;YACLC,OAAO;YACPC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;YAC9BiB;UACF;QACF,CAAC;MACH;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAIN,KAAK,IAAKA,KAAK,CAACO,KAAK;AAEpD,OAAO,MAAM;EAAET;AAAU,CAAC,GAAGH,UAAU,CAACa,OAAO;AAE/C,eAAeb,UAAU,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}