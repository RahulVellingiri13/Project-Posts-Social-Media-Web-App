{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\n\n// const initialState = [\n//   {\n//     id: \"1\",\n//     title: \"Macbook\",\n//     content: \"It is hard\",\n//     date: sub(new Date(), { minutes: 10 }).toISOString(),\n//     reactions: {\n//       thumbsUp: 0,\n//       wow: 0,\n//       heart: 0,\n//       rocket: 0,\n//       coffee: 0,\n//     },\n//   },\n//   {\n//     id: \"2\",\n//     title: \"Windows\",\n//     content: \"It is Easy\",\n//     date: sub(new Date(), { minutes: 5 }).toISOString(),\n//     reactions: {\n//         thumbsUp: 0,\n//         wow: 0,\n//         heart: 0,\n//         rocket: 0,\n//         coffee: 0,\n//       },\n//   },\n// ];\n\n//rewriting the initial state so that we can fetch the data from the apis\n\nconst initialState = {\n  posts: [],\n  status: \"idle\",\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(fetchPosts.pending, (state, action) => {\n        state.status = \"loading\";\n      }).addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        //Adding date and reactions , because the status is succeded\n        let min = 1;\n        const loadedPosts = action.payload.map(post => {\n          post.date = sub(new Date(), {\n            minutes: min++\n          }).toISOString();\n          post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0\n          };\n          return post;\n        });\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(loadedPosts);\n      }).addCase(fetchPosts.rejected, (state, action) => {\n        state.status = \"failed\";\n        status.error = action.error.message;\n      });\n    }\n  }\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = state => state.posts.posts;\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","post","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","concat","rejected","message","selectAllPosts","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\n\n// const initialState = [\n//   {\n//     id: \"1\",\n//     title: \"Macbook\",\n//     content: \"It is hard\",\n//     date: sub(new Date(), { minutes: 10 }).toISOString(),\n//     reactions: {\n//       thumbsUp: 0,\n//       wow: 0,\n//       heart: 0,\n//       rocket: 0,\n//       coffee: 0,\n//     },\n//   },\n//   {\n//     id: \"2\",\n//     title: \"Windows\",\n//     content: \"It is Easy\",\n//     date: sub(new Date(), { minutes: 5 }).toISOString(),\n//     reactions: {\n//         thumbsUp: 0,\n//         wow: 0,\n//         heart: 0,\n//         rocket: 0,\n//         coffee: 0,\n//       },\n//   },\n// ];\n\n//rewriting the initial state so that we can fetch the data from the apis\n\nconst initialState = {\n  posts: [],\n  status: \"idle\", // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0,\n            },\n          },\n        };\n      },\n    },\n\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.posts.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    extraReducers(builder) {\n      builder\n        .addCase(fetchPosts.pending, (state, action) => {\n          state.status = \"loading\";\n        })\n        .addCase(fetchPosts.fulfilled, (state, action) => {\n          state.status = \"succeeded\";\n          //Adding date and reactions , because the status is succeded\n          let min = 1;\n          const loadedPosts = action.payload.map((post) => {\n            post.date = sub(new Date(), { minutes: min++ }).toISOString();\n            post.reactions = {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0,\n            };\n\n            return post;\n          });\n          // Add any fetched posts to the array\n          state.posts = state.posts.concat(loadedPosts);\n        })\n        .addCase(fetchPosts.rejected, (state, action) => {\n          state.status = \"failed\"\n          status.error = action.error.message\n        });\n    },\n  },\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = (state) => state.posts.posts;\n\nexport const { postAdded, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}