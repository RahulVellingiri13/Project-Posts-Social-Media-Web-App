{"ast":null,"code":"// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from \"date-fns\";\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// // const initialState = [\n// //   {\n// //     id: \"1\",\n// //     title: \"Macbook\",\n// //     content: \"It is hard\",\n// //     date: sub(new Date(), { minutes: 10 }).toISOString(),\n// //     reactions: {\n// //       thumbsUp: 0,\n// //       wow: 0,\n// //       heart: 0,\n// //       rocket: 0,\n// //       coffee: 0,\n// //     },\n// //   },\n// //   {\n// //     id: \"2\",\n// //     title: \"Windows\",\n// //     content: \"It is Easy\",\n// //     date: sub(new Date(), { minutes: 5 }).toISOString(),\n// //     reactions: {\n// //         thumbsUp: 0,\n// //         wow: 0,\n// //         heart: 0,\n// //         rocket: 0,\n// //         coffee: 0,\n// //       },\n// //   },\n// // ];\n\n// //rewriting the initial state so that we can fetch the data from the apis\n\n// const initialState = {\n//   posts: [],\n//   status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n//   error: null,\n// };\n\n// export const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n//   const response = await axios.get(POSTS_URL);\n//   return response.data;\n// });\n\n// const postsSlice = createSlice({\n//   name: 'posts',\n//   initialState,\n//   reducers: {\n//     // postAdded(state,action){\n//     //     state.push(action.payload)\n//     // }\n//     //rewriting the code her for updating the structure of the data\n//     postAdded: {\n//       reducer(state, action) {\n//         state.posts.push(action.payload);\n//       },\n//       //using 'prepare' callback here for maintaining the data structure\n//       prepare(title, content, userId) {\n//         return {\n//           payload: {\n//             id: nanoid(),\n//             title,\n//             content,\n//             date: new Date().toISOString(),\n//             userId,\n//             reactions: {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             },\n//           },\n//         };\n//       },\n//     },\n\n//     reactionAdded(state, action) {\n//       const { postId, reaction } = action.payload;\n//       const existingPost = state.posts.find((post) => post.id === postId);\n//       if (existingPost) {\n//         existingPost.reactions[reaction]++;\n//       }\n//     },\n//     extraReducers(builder) {\n//       builder\n//         .addCase(fetchPosts.pending, (state, action) => {\n//           state.status = \"loading\";\n//         })\n//         .addCase(fetchPosts.fulfilled, (state, action) => {\n//           state.status = \"succeeded\";\n//           //Adding date and reactions , because the status is succeded\n//           let min = 1;\n//           const loadedPosts = action.payload.map((post) => {\n//             post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//             post.reactions = {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             };\n\n//             return post;\n//           });\n//           // Add any fetched posts to the array\n//           state.posts = state.posts.concat(loadedPosts);\n//         })\n//         .addCase(fetchPosts.rejected, (state, action) => {\n//           state.status = 'failed';\n//           state.error = action.error.message\n//         });\n//     },\n//   },\n// });\n\n// //creating and exporting selectAllPosts , so that we can export the changes in it dynamically\n// export const selectAllPosts = (state) => state.posts.posts;\n\n// export const getPostsStatus = (state)=>state.posts.status;\n\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// export default postsSlice.reducer;\n\n//--------------------------------- \n\nimport { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await axios.post(POSTS_URL, initialPost);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Adding date and reactions\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      });\n\n      // Add any fetched posts to the array\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      // Fix for API post IDs:\n      // Creating sortedPosts & assigning the id \n      // would be not be needed if the fake API \n      // returned accurate new post IDs\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n      // End fix for fake API post IDs \n\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        hooray: 0,\n        heart: 0,\n        rocket: 0\n        // eyes: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    });\n  }\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostById = (state, posstId) => state.posts.posts.find(post => post);\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","concat","rejected","message","sortedPosts","sort","a","b","length","Number","hooray","console","log","selectAllPosts","selectPostById","posstId","getPostsStatus","getPostsError","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from \"date-fns\";\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// // const initialState = [\n// //   {\n// //     id: \"1\",\n// //     title: \"Macbook\",\n// //     content: \"It is hard\",\n// //     date: sub(new Date(), { minutes: 10 }).toISOString(),\n// //     reactions: {\n// //       thumbsUp: 0,\n// //       wow: 0,\n// //       heart: 0,\n// //       rocket: 0,\n// //       coffee: 0,\n// //     },\n// //   },\n// //   {\n// //     id: \"2\",\n// //     title: \"Windows\",\n// //     content: \"It is Easy\",\n// //     date: sub(new Date(), { minutes: 5 }).toISOString(),\n// //     reactions: {\n// //         thumbsUp: 0,\n// //         wow: 0,\n// //         heart: 0,\n// //         rocket: 0,\n// //         coffee: 0,\n// //       },\n// //   },\n// // ];\n\n// //rewriting the initial state so that we can fetch the data from the apis\n\n// const initialState = {\n//   posts: [],\n//   status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n//   error: null,\n// };\n\n// export const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n//   const response = await axios.get(POSTS_URL);\n//   return response.data;\n// });\n\n// const postsSlice = createSlice({\n//   name: 'posts',\n//   initialState,\n//   reducers: {\n//     // postAdded(state,action){\n//     //     state.push(action.payload)\n//     // }\n//     //rewriting the code her for updating the structure of the data\n//     postAdded: {\n//       reducer(state, action) {\n//         state.posts.push(action.payload);\n//       },\n//       //using 'prepare' callback here for maintaining the data structure\n//       prepare(title, content, userId) {\n//         return {\n//           payload: {\n//             id: nanoid(),\n//             title,\n//             content,\n//             date: new Date().toISOString(),\n//             userId,\n//             reactions: {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             },\n//           },\n//         };\n//       },\n//     },\n\n//     reactionAdded(state, action) {\n//       const { postId, reaction } = action.payload;\n//       const existingPost = state.posts.find((post) => post.id === postId);\n//       if (existingPost) {\n//         existingPost.reactions[reaction]++;\n//       }\n//     },\n//     extraReducers(builder) {\n//       builder\n//         .addCase(fetchPosts.pending, (state, action) => {\n//           state.status = \"loading\";\n//         })\n//         .addCase(fetchPosts.fulfilled, (state, action) => {\n//           state.status = \"succeeded\";\n//           //Adding date and reactions , because the status is succeded\n//           let min = 1;\n//           const loadedPosts = action.payload.map((post) => {\n//             post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//             post.reactions = {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             };\n\n//             return post;\n//           });\n//           // Add any fetched posts to the array\n//           state.posts = state.posts.concat(loadedPosts);\n//         })\n//         .addCase(fetchPosts.rejected, (state, action) => {\n//           state.status = 'failed';\n//           state.error = action.error.message\n//         });\n//     },\n//   },\n// });\n\n// //creating and exporting selectAllPosts , so that we can export the changes in it dynamically\n// export const selectAllPosts = (state) => state.posts.posts;\n\n// export const getPostsStatus = (state)=>state.posts.status;\n\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// export default postsSlice.reducer;\n\n//--------------------------------- \n\nimport { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nconst initialState = {\n    posts: [],\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\n    error: null\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await axios.get(POSTS_URL)\n    return response.data\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost)\n    return response.data\n})\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        postAdded: {\n            reducer(state, action) {\n                state.posts.push(action.payload)\n            },\n            prepare(title, content, userId) {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        date: new Date().toISOString(),\n                        userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action) {\n            const { postId, reaction } = action.payload\n            const existingPost = state.posts.find(post => post.id === postId)\n            if (existingPost) {\n                existingPost.reactions[reaction]++\n            }\n        }\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchPosts.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                // Adding date and reactions\n                let min = 1;\n                const loadedPosts = action.payload.map(post => {\n                    post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n\n                // Add any fetched posts to the array\n                state.posts = state.posts.concat(loadedPosts)\n            })\n            .addCase(fetchPosts.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(addNewPost.fulfilled, (state, action) => {\n                // Fix for API post IDs:\n                // Creating sortedPosts & assigning the id \n                // would be not be needed if the fake API \n                // returned accurate new post IDs\n                const sortedPosts = state.posts.sort((a, b) => {\n                    if (a.id > b.id) return 1\n                    if (a.id < b.id) return -1\n                    return 0\n                })\n                action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n                // End fix for fake API post IDs \n\n                action.payload.userId = Number(action.payload.userId)\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    hooray: 0,\n                    heart: 0,\n                    rocket: 0,\n                    // eyes: 0\n                }\n                console.log(action.payload)\n                state.posts.push(action.payload)\n            })\n    }\n})\n\nexport const selectAllPosts = (state) => state.posts.posts;\n\nexport const selectPostById = (state,posstId) => state.posts.posts.find(post=> post)\n\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\n\n\nexport const { postAdded, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,SAASA,WAAW,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,kBAAkB;AACxE,SAASC,GAAG,QAAQ,UAAU;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAG,4CAA4C;AAE9D,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACvE,MAAMS,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,SAAS,CAAC;EAC3C,OAAOM,QAAQ,CAACE,IAAI;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAkB,EAAE,MAAOa,WAAW,IAAK;EAClF,MAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACY,IAAI,CAACX,SAAS,EAAEU,WAAW,CAAC;EACzD,OAAOJ,QAAQ,CAACE,IAAI;AACxB,CAAC,CAAC;AAEF,MAAMI,UAAU,GAAGj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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}