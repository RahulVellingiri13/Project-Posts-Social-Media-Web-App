{"ast":null,"code":"// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from \"date-fns\";\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// // const initialState = [\n// //   {\n// //     id: \"1\",\n// //     title: \"Macbook\",\n// //     content: \"It is hard\",\n// //     date: sub(new Date(), { minutes: 10 }).toISOString(),\n// //     reactions: {\n// //       thumbsUp: 0,\n// //       wow: 0,\n// //       heart: 0,\n// //       rocket: 0,\n// //       coffee: 0,\n// //     },\n// //   },\n// //   {\n// //     id: \"2\",\n// //     title: \"Windows\",\n// //     content: \"It is Easy\",\n// //     date: sub(new Date(), { minutes: 5 }).toISOString(),\n// //     reactions: {\n// //         thumbsUp: 0,\n// //         wow: 0,\n// //         heart: 0,\n// //         rocket: 0,\n// //         coffee: 0,\n// //       },\n// //   },\n// // ];\n\n// //rewriting the initial state so that we can fetch the data from the apis\n\n// const initialState = {\n//   posts: [],\n//   status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n//   error: null,\n// };\n\n// export const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n//   const response = await axios.get(POSTS_URL);\n//   return response.data;\n// });\n\n// const postsSlice = createSlice({\n//   name: 'posts',\n//   initialState,\n//   reducers: {\n//     // postAdded(state,action){\n//     //     state.push(action.payload)\n//     // }\n//     //rewriting the code her for updating the structure of the data\n//     postAdded: {\n//       reducer(state, action) {\n//         state.posts.push(action.payload);\n//       },\n//       //using 'prepare' callback here for maintaining the data structure\n//       prepare(title, content, userId) {\n//         return {\n//           payload: {\n//             id: nanoid(),\n//             title,\n//             content,\n//             date: new Date().toISOString(),\n//             userId,\n//             reactions: {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             },\n//           },\n//         };\n//       },\n//     },\n\n//     reactionAdded(state, action) {\n//       const { postId, reaction } = action.payload;\n//       const existingPost = state.posts.find((post) => post.id === postId);\n//       if (existingPost) {\n//         existingPost.reactions[reaction]++;\n//       }\n//     },\n//     extraReducers(builder) {\n//       builder\n//         .addCase(fetchPosts.pending, (state, action) => {\n//           state.status = \"loading\";\n//         })\n//         .addCase(fetchPosts.fulfilled, (state, action) => {\n//           state.status = \"succeeded\";\n//           //Adding date and reactions , because the status is succeded\n//           let min = 1;\n//           const loadedPosts = action.payload.map((post) => {\n//             post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//             post.reactions = {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             };\n\n//             return post;\n//           });\n//           // Add any fetched posts to the array\n//           state.posts = state.posts.concat(loadedPosts);\n//         })\n//         .addCase(fetchPosts.rejected, (state, action) => {\n//           state.status = 'failed';\n//           state.error = action.error.message\n//         });\n//     },\n//   },\n// });\n\n// //creating and exporting selectAllPosts , so that we can export the changes in it dynamically\n// export const selectAllPosts = (state) => state.posts.posts;\n\n// export const getPostsStatus = (state)=>state.posts.status;\n\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// export default postsSlice.reducer;\n\n//---------------------------------\n\n// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from 'date-fns';\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// const initialState = {\n//     posts: [],\n//     status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\n//     error: null\n// }\n\n// export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n//     const response = await axios.get(POSTS_URL)\n//     return response.data\n// })\n\n// export const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\n//     const response = await axios.post(POSTS_URL, initialPost)\n//     return response.data\n// })\n\n// const postsSlice = createSlice({\n//     name: 'posts',\n//     initialState,\n//     reducers: {\n//         postAdded: {\n//             reducer(state, action) {\n//                 state.posts.push(action.payload)\n//             },\n//             prepare(title, content, userId) {\n//                 return {\n//                     payload: {\n//                         id: nanoid(),\n//                         title,\n//                         content,\n//                         date: new Date().toISOString(),\n//                         userId,\n//                         reactions: {\n//                             thumbsUp: 0,\n//                             wow: 0,\n//                             heart: 0,\n//                             rocket: 0,\n//                             coffee: 0\n//                         }\n//                     }\n//                 }\n//             }\n//         },\n//         reactionAdded(state, action) {\n//             const { postId, reaction } = action.payload\n//             const existingPost = state.posts.find(post => post.id === postId)\n//             if (existingPost) {\n//                 existingPost.reactions[reaction]++\n//             }\n//         }\n//     },\n//     extraReducers(builder) {\n//         builder\n//             .addCase(fetchPosts.pending, (state, action) => {\n//                 state.status = 'loading'\n//             })\n//             .addCase(fetchPosts.fulfilled, (state, action) => {\n//                 state.status = 'succeeded'\n//                 // Adding date and reactions\n//                 let min = 1;\n//                 const loadedPosts = action.payload.map(post => {\n//                     post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//                     post.reactions = {\n//                         thumbsUp: 0,\n//                         wow: 0,\n//                         heart: 0,\n//                         rocket: 0,\n//                         coffee: 0\n//                     }\n//                     return post;\n//                 });\n\n//                 // Add any fetched posts to the array\n//                 state.posts = state.posts.concat(loadedPosts)\n//             })\n//             .addCase(fetchPosts.rejected, (state, action) => {\n//                 state.status = 'failed'\n//                 state.error = action.error.message\n//             })\n//             .addCase(addNewPost.fulfilled, (state, action) => {\n//                 // Fix for API post IDs:\n//                 // Creating sortedPosts & assigning the id \n//                 // would be not be needed if the fake API \n//                 // returned accurate new post IDs\n//                 const sortedPosts = state.posts.sort((a, b) => {\n//                     if (a.id > b.id) return 1\n//                     if (a.id < b.id) return -1\n//                     return 0\n//                 })\n//                 action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n//                 // End fix for fake API post IDs \n\n//                 action.payload.userId = Number(action.payload.userId)\n//                 action.payload.date = new Date().toISOString();\n//                 action.payload.reactions = {\n//                     thumbsUp: 0,\n//                     hooray: 0,\n//                     heart: 0,\n//                     rocket: 0,\n//                     eyes: 0\n//                 }\n//                 console.log(action.payload)\n//                 state.posts.push(action.payload)\n//             })\n//     }\n// })\n\n// export const selectAllPosts = (state) => state.posts.posts;\n// export const getPostsStatus = (state) => state.posts.status;\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions\n\n// export default postsSlice.reducer","map":{"version":3,"names":[],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from \"date-fns\";\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// // const initialState = [\n// //   {\n// //     id: \"1\",\n// //     title: \"Macbook\",\n// //     content: \"It is hard\",\n// //     date: sub(new Date(), { minutes: 10 }).toISOString(),\n// //     reactions: {\n// //       thumbsUp: 0,\n// //       wow: 0,\n// //       heart: 0,\n// //       rocket: 0,\n// //       coffee: 0,\n// //     },\n// //   },\n// //   {\n// //     id: \"2\",\n// //     title: \"Windows\",\n// //     content: \"It is Easy\",\n// //     date: sub(new Date(), { minutes: 5 }).toISOString(),\n// //     reactions: {\n// //         thumbsUp: 0,\n// //         wow: 0,\n// //         heart: 0,\n// //         rocket: 0,\n// //         coffee: 0,\n// //       },\n// //   },\n// // ];\n\n// //rewriting the initial state so that we can fetch the data from the apis\n\n// const initialState = {\n//   posts: [],\n//   status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n//   error: null,\n// };\n\n// export const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n//   const response = await axios.get(POSTS_URL);\n//   return response.data;\n// });\n\n// const postsSlice = createSlice({\n//   name: 'posts',\n//   initialState,\n//   reducers: {\n//     // postAdded(state,action){\n//     //     state.push(action.payload)\n//     // }\n//     //rewriting the code her for updating the structure of the data\n//     postAdded: {\n//       reducer(state, action) {\n//         state.posts.push(action.payload);\n//       },\n//       //using 'prepare' callback here for maintaining the data structure\n//       prepare(title, content, userId) {\n//         return {\n//           payload: {\n//             id: nanoid(),\n//             title,\n//             content,\n//             date: new Date().toISOString(),\n//             userId,\n//             reactions: {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             },\n//           },\n//         };\n//       },\n//     },\n\n//     reactionAdded(state, action) {\n//       const { postId, reaction } = action.payload;\n//       const existingPost = state.posts.find((post) => post.id === postId);\n//       if (existingPost) {\n//         existingPost.reactions[reaction]++;\n//       }\n//     },\n//     extraReducers(builder) {\n//       builder\n//         .addCase(fetchPosts.pending, (state, action) => {\n//           state.status = \"loading\";\n//         })\n//         .addCase(fetchPosts.fulfilled, (state, action) => {\n//           state.status = \"succeeded\";\n//           //Adding date and reactions , because the status is succeded\n//           let min = 1;\n//           const loadedPosts = action.payload.map((post) => {\n//             post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//             post.reactions = {\n//               thumbsUp: 0,\n//               wow: 0,\n//               heart: 0,\n//               rocket: 0,\n//               coffee: 0,\n//             };\n\n//             return post;\n//           });\n//           // Add any fetched posts to the array\n//           state.posts = state.posts.concat(loadedPosts);\n//         })\n//         .addCase(fetchPosts.rejected, (state, action) => {\n//           state.status = 'failed';\n//           state.error = action.error.message\n//         });\n//     },\n//   },\n// });\n\n// //creating and exporting selectAllPosts , so that we can export the changes in it dynamically\n// export const selectAllPosts = (state) => state.posts.posts;\n\n// export const getPostsStatus = (state)=>state.posts.status;\n\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// export default postsSlice.reducer;\n\n//---------------------------------\n\n// import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { sub } from 'date-fns';\n// import axios from \"axios\";\n\n// const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// const initialState = {\n//     posts: [],\n//     status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\n//     error: null\n// }\n\n// export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n//     const response = await axios.get(POSTS_URL)\n//     return response.data\n// })\n\n// export const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\n//     const response = await axios.post(POSTS_URL, initialPost)\n//     return response.data\n// })\n\n// const postsSlice = createSlice({\n//     name: 'posts',\n//     initialState,\n//     reducers: {\n//         postAdded: {\n//             reducer(state, action) {\n//                 state.posts.push(action.payload)\n//             },\n//             prepare(title, content, userId) {\n//                 return {\n//                     payload: {\n//                         id: nanoid(),\n//                         title,\n//                         content,\n//                         date: new Date().toISOString(),\n//                         userId,\n//                         reactions: {\n//                             thumbsUp: 0,\n//                             wow: 0,\n//                             heart: 0,\n//                             rocket: 0,\n//                             coffee: 0\n//                         }\n//                     }\n//                 }\n//             }\n//         },\n//         reactionAdded(state, action) {\n//             const { postId, reaction } = action.payload\n//             const existingPost = state.posts.find(post => post.id === postId)\n//             if (existingPost) {\n//                 existingPost.reactions[reaction]++\n//             }\n//         }\n//     },\n//     extraReducers(builder) {\n//         builder\n//             .addCase(fetchPosts.pending, (state, action) => {\n//                 state.status = 'loading'\n//             })\n//             .addCase(fetchPosts.fulfilled, (state, action) => {\n//                 state.status = 'succeeded'\n//                 // Adding date and reactions\n//                 let min = 1;\n//                 const loadedPosts = action.payload.map(post => {\n//                     post.date = sub(new Date(), { minutes: min++ }).toISOString();\n//                     post.reactions = {\n//                         thumbsUp: 0,\n//                         wow: 0,\n//                         heart: 0,\n//                         rocket: 0,\n//                         coffee: 0\n//                     }\n//                     return post;\n//                 });\n\n//                 // Add any fetched posts to the array\n//                 state.posts = state.posts.concat(loadedPosts)\n//             })\n//             .addCase(fetchPosts.rejected, (state, action) => {\n//                 state.status = 'failed'\n//                 state.error = action.error.message\n//             })\n//             .addCase(addNewPost.fulfilled, (state, action) => {\n//                 // Fix for API post IDs:\n//                 // Creating sortedPosts & assigning the id \n//                 // would be not be needed if the fake API \n//                 // returned accurate new post IDs\n//                 const sortedPosts = state.posts.sort((a, b) => {\n//                     if (a.id > b.id) return 1\n//                     if (a.id < b.id) return -1\n//                     return 0\n//                 })\n//                 action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n//                 // End fix for fake API post IDs \n\n//                 action.payload.userId = Number(action.payload.userId)\n//                 action.payload.date = new Date().toISOString();\n//                 action.payload.reactions = {\n//                     thumbsUp: 0,\n//                     hooray: 0,\n//                     heart: 0,\n//                     rocket: 0,\n//                     eyes: 0\n//                 }\n//                 console.log(action.payload)\n//                 state.posts.push(action.payload)\n//             })\n//     }\n// })\n\n// export const selectAllPosts = (state) => state.posts.posts;\n// export const getPostsStatus = (state) => state.posts.status;\n// export const getPostsError = (state) => state.posts.error;\n\n// export const { postAdded, reactionAdded } = postsSlice.actions\n\n// export default postsSlice.reducer"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}