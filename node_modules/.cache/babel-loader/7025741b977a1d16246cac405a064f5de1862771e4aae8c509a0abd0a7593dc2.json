{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Documents/GT/React/redux/reduxyt/src/app/features/posts/Postslist.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectPostIds, selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from \"./postsSlice\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { useEffect } from \"react\";\nimport PostExcerpts from \"./PostExcerpts\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsList = () => {\n  _s();\n  //   const posts = useSelector((state) => state.posts);\n  // rewriting the code so that we can keep the value of the useSelector dynamically\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (postsStatus === \"idle\") {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);\n  let content;\n  if (postsStatus === \"loading\") {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"Loading....\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }, this);\n  } else if (postsStatus === \"succeeded\") {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPostsByIda.map(post => /*#__PURE__*/_jsxDEV(PostExcerpts, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this));\n  } else if (postsStatus === \"failed\") {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(PostsList, \"dyqgnMqXmKRvqPsY5kkZaGXljSs=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["useDispatch","useSelector","selectPostIds","selectAllPosts","getPostsStatus","getPostsError","fetchPosts","PostAuthor","TimeAgo","ReactionButtons","useEffect","PostExcerpts","jsxDEV","_jsxDEV","Fragment","_Fragment","PostsList","_s","posts","postsStatus","error","dispatch","content","children","fileName","_jsxFileName","lineNumber","columnNumber","orderedPosts","slice","sort","a","b","date","localeCompare","orderedPostsByIda","map","post","id","_c","$RefreshReg$"],"sources":["/Users/rahul/Documents/GT/React/redux/reduxyt/src/app/features/posts/Postslist.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectPostIds,\n  selectAllPosts,\n  getPostsStatus,\n  getPostsError,\n  fetchPosts,\n} from \"./postsSlice\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { useEffect } from \"react\";\nimport PostExcerpts from \"./PostExcerpts\";\n\nconst PostsList = () => {\n  //   const posts = useSelector((state) => state.posts);\n  // rewriting the code so that we can keep the value of the useSelector dynamically\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postsStatus === \"idle\") {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);\n\n  let content;\n\n  if (postsStatus === \"loading\") {\n    content = <p>\"Loading....\"</p>;\n  } else if (postsStatus === \"succeeded\") {\n    const orderedPosts = posts\n      .slice()\n      .sort((a, b) => b.date.localeCompare(a.date));\n\n    content = orderedPostsByIda.map((post) => (\n      <PostExcerpts key={post.id} post={post} />\n    ));\n  } else if (postsStatus === \"failed\") {\n    content = <p>{error}</p>;\n  }\n\n  return (\n    <>\n      <section>{content}</section>\n    </>\n  );\n};\n\nexport default PostsList;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,UAAU,QACL,cAAc;AACrB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA;EACA,MAAMC,KAAK,GAAGjB,WAAW,CAACE,cAAc,CAAC;EACzC,MAAMgB,WAAW,GAAGlB,WAAW,CAACG,cAAc,CAAC;EAC/C,MAAMgB,KAAK,GAAGnB,WAAW,CAACI,aAAa,CAAC;EACxC,MAAMgB,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAE9BU,SAAS,CAAC,MAAM;IACd,IAAIS,WAAW,KAAK,MAAM,EAAE;MAC1BE,QAAQ,CAACf,UAAU,CAAC,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACa,WAAW,EAAEE,QAAQ,CAAC,CAAC;EAE3B,IAAIC,OAAO;EAEX,IAAIH,WAAW,KAAK,SAAS,EAAE;IAC7BG,OAAO,gBAAGT,OAAA;MAAAU,QAAA,EAAG;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC,CAAC,MAAM,IAAIR,WAAW,KAAK,WAAW,EAAE;IACtC,MAAMS,YAAY,GAAGV,KAAK,CACvBW,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI,CAAC,CAAC;IAE/CX,OAAO,GAAGa,iBAAiB,CAACC,GAAG,CAAEC,IAAI,iBACnCxB,OAAA,CAACF,YAAY;MAAe0B,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACC,EAAE;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAC1C,CAAC;EACJ,CAAC,MAAM,IAAIR,WAAW,KAAK,QAAQ,EAAE;IACnCG,OAAO,gBAAGT,OAAA;MAAAU,QAAA,EAAIH;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC1B;EAEA,oBACEd,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACEV,OAAA;MAAAU,QAAA,EAAUD;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EAAC,gBAC5B,CAAC;AAEP,CAAC;AAACV,EAAA,CAnCID,SAAS;EAAA,QAGCf,WAAW,EACLA,WAAW,EACjBA,WAAW,EACRD,WAAW;AAAA;AAAAuC,EAAA,GANxBvB,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}