{"ast":null,"code":"var _jsxFileName = \"/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/AddPostForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddPostForm = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const users = useSelector(selectAllUsers);\n  const [addRequestStatus, setAddRequestStatus] = useState('idle');\n  const onTitleChanged = e => setTitle(e.target.value);\n  const onContentChanged = e => setContent(e.target.value);\n  const onAuthorChanged = e => setUserId(e.target.value);\n  const canSave = [title, content, userId].every(Boolean) && addRequestStatus === 'idle';\n\n  //rewriting the onSavePostClicked logic here above;\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending');\n        dispatch(addNewPost({\n          title,\n          content,\n          userId\n        })), unwrap();\n        setTitle('');\n        setContent('');\n        setUserId('');\n      } catch (err) {\n        console.error('Failed to save the post', err);\n      } finally {\n        setAddRequestStatus('idle');\n      }\n    }\n  };\n\n  // const onSavePostClicked = () => {\n  //   if (title && content) {\n  //     dispatch(\n  //       postAdded(\n  //         // {id:nanoid(),\n  //         // title,\n  //         // content,}\n  //         //rewriting the code, here for convenince of structure of data\n  //         title,\n  //         content,\n  //         userId\n  //       )\n  //     );\n  //     setTitle(\"\");\n  //     setContent(\"\");\n  //     setUserId(\"\");\n  //   }\n  // };\n\n  // const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n  const userOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Add a new Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \" Post Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTite\",\n          name: \"postTitle\",\n          type: \"text\",\n          value: title,\n          onChange: onTitleChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postAuthor\",\n          children: \"Author:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"postAuthor\",\n          value: userId,\n          onChange: onAuthorChanged,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), userOptions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postContent\",\n          children: \" Content:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"postContent\",\n          name: \"postContent\",\n          type: \"text\",\n          value: content,\n          onChange: onContentChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onSavePostClicked,\n          disabled: !canSave,\n          children: \"Save Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AddPostForm, \"7/ZPYEW4RyJLE9T+rseo+i/HicU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AddPostForm;\nexport default AddPostForm;\nvar _c;\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"names":["useState","useDispatch","useSelector","addNewPost","selectAllUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","AddPostForm","_s","dispatch","title","setTitle","content","setContent","userId","setUserId","users","addRequestStatus","setAddRequestStatus","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","canSave","every","Boolean","onSavePostClicked","unwrap","err","console","error","userOptions","map","user","id","children","name","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/AddPostForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { selectAllUsers } from \"../users/usersSlice\";\n\nconst AddPostForm = () => {\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n\n  const users = useSelector(selectAllUsers);\n\n  const [addRequestStatus,setAddRequestStatus] = useState('idle')\n\n  const onTitleChanged = (e) => setTitle(e.target.value);\n  const onContentChanged = (e) => setContent(e.target.value);\n  const onAuthorChanged = (e) => setUserId(e.target.value);\n\nconst canSave = [title,content,userId].every(Boolean) && addRequestStatus ==='idle';\n\n//rewriting the onSavePostClicked logic here above;\n\nconst onSavePostClicked =()=>{\n  if(canSave){\n    try{\n      setAddRequestStatus('pending')\n      dispatch(addNewPost({title,content,userId})),\n      unwrap()\n\n      setTitle('')\n      setContent('')\n      setUserId('')\n    }catch(err){\n      console.error('Failed to save the post',err)\n    }\n    finally{\n      setAddRequestStatus('idle')\n    }\n  }\n}\n\n\n  // const onSavePostClicked = () => {\n  //   if (title && content) {\n  //     dispatch(\n  //       postAdded(\n  //         // {id:nanoid(),\n  //         // title,\n  //         // content,}\n  //         //rewriting the code, here for convenince of structure of data\n  //         title,\n  //         content,\n  //         userId\n  //       )\n  //     );\n  //     setTitle(\"\");\n  //     setContent(\"\");\n  //     setUserId(\"\");\n  //   }\n  // };\n\n\n  // const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\n  const userOptions = users.map(user => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n\n  return (\n    <>\n      <section>\n        <h2> Add a new Post </h2>\n        <form>\n          <label htmlFor=\"postTitle\"> Post Title:</label>\n          <input\n            id=\"postTite\"\n            name=\"postTitle\"\n            type=\"text\"\n            value={title}\n            onChange={onTitleChanged}\n          />\n\n          <label htmlFor=\"postAuthor\">Author:</label>\n          <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n            <option value=\"\"></option>\n            {userOptions}\n          </select>\n\n          <label htmlFor=\"postContent\"> Content:</label>\n          <textarea\n            id=\"postContent\"\n            name=\"postContent\"\n            type=\"text\"\n            value={content}\n            onChange={onContentChanged}\n          />\n          <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n            Save Post\n          </button>\n        </form>\n      </section>\n    </>\n  );\n};\n\nexport default AddPostForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}