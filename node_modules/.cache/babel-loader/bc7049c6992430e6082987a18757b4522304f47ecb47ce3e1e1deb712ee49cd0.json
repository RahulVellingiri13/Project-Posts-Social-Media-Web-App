{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: \"1\",\n  title: \"Macbook\",\n  content: \"It is hard\"\n}, {\n  id: \"2\",\n  title: \"Windows\",\n  content: \"It is Easy\"\n}];\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n    }\n  }\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = state => state.posts;\nexport const {\n  postAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","selectAllPosts","posts","actions"],"sources":["/Users/rahul/Documents/GT/React/reduxyt/src/app/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n  {\n    id: \"1\",\n    title: \"Macbook\",\n    content: \"It is hard\",\n  },\n  {\n    id: \"2\",\n    title: \"Windows\",\n    content: \"It is Easy\",\n  },\n];\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    // postAdded(state,action){\n    //     state.push(action.payload)\n    // }\n    //rewriting the code her for updating the structure of the data\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      //using 'prepare' callback here for maintaining the data structure\n      prepare(title, content,userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n          },\n        };\n      },\n    },\n  },\n});\n\n//creating and exporting selectAllPosts , so that we can export the changes in it dynamically\nexport const selectAllPosts = (state) => state.posts;\n\nexport const { postAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE;AACX,CAAC,CACF;AAED,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACAC,SAAS,EAAE;MACTC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QACrBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC5B,CAAC;MACD;MACAC,OAAOA,CAACX,KAAK,EAAEC,OAAO,EAACW,MAAM,EAAE;QAC7B,OAAO;UACLF,OAAO,EAAE;YACPX,EAAE,EAAEF,MAAM,CAAC,CAAC;YACZG,KAAK;YACLC;UACF;QACF,CAAC;MACH;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMY,cAAc,GAAIN,KAAK,IAAKA,KAAK,CAACO,KAAK;AAEpD,OAAO,MAAM;EAAET;AAAU,CAAC,GAAGH,UAAU,CAACa,OAAO;AAE/C,eAAeb,UAAU,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}